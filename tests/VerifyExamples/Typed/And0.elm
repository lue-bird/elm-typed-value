module VerifyExamples.Typed.And0 exposing (..)

-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples).
-- Please don't modify this file by hand!

import Test
import Expect

import Typed exposing (..)
import Typed exposing (Checked, Public, Typed, mapToTyped, tag)

type OddTag
    = Odd
type NonPrimeTag
    = NonPrime
type alias NonPrime =
    Typed Checked NonPrimeTag Public Int
type PrimeTag
    = Prime
type alias Prime =
    Typed Checked PrimeTag Public Int

smaller : Typed create tag access Int -> Typed create tag access Int -> Typed create tag access Int
smaller =
    \int0Typed int1Typed ->
        int0Typed
            |> Typed.and int1Typed
            |> Typed.mapToTyped
                (\( int0, int1 ) ->
                    if int0 <= int1 then
                        int0Typed
                    else
                        -- int1 < int0
                        int1Typed
                )



spec0 : Test.Test
spec0 =
    Test.test "#and: \n\n    smaller (Typed.tag Odd 3) (Typed.tag Odd 5)\n    --> Typed.tag Odd 3" <|
        \() ->
            Expect.equal
                (
                smaller (Typed.tag Odd 3) (Typed.tag Odd 5)
                )
                (
                Typed.tag Odd 3
                )